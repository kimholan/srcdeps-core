#
# Copyright 2015-2016 Maven Source Dependencies
# Plugin contributors as indicated by the @author tags.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# `.mvn/srcdeps.yaml` - the srcdeps configuration file.
#
# The full srcdeps.yaml reference can be found under https://github.com/srcdeps/srcdeps-core/tree/master/doc/srcdeps.yaml
#
# Note that the options set here can be overriden on the command line,
# see https://github.com/srcdeps/srcdeps-maven/blob/master/README.adoc#override-mvnsrcdepsyaml-options-on-the-command-line


# `configModelVersion` exists to track the changes in the schema of of the srcdeps.yaml file.
#
# = configModelVersion compatibility matrix
#
# configModelVersion | srcdeps-core | srcdeps-maven
# -------------------+--------------+--------------
# 1.0                | 2.0.0        | 2.0.0
# 1.1                | 2.1.0        | 2.1.0
#
# Required, no default
configModelVersion: 1.1

# `forwardProperties` - used rarely, mostly for debugging.
# A list of property names that the top level builder A should pass as java system properties to every
# dependency builder B using `-DmyProperty=myValue` style command line arguments. Further, in case a child
# builder B spawns its own new child builder C, B must pass all these properties to C in the very same
# manner as A did to B.
#
# A property name may end with asterisk {@code *} to denote that all properties starting with the part before the
# asterisk should be forwared. E.g. {@code my.prop.*} would forward both {@code my.prop.foo} and
# {@code my.prop.bar}.
#
# Optional, default: srcdeps.mvn.*
forwardProperties:
- myForwardProperty

# `builderIo` - a triple of definitions how to handle the three standard I/O steams of the child builder
# process. The syntax of the definitions mostly follows the semantics of
# `java.lang.ProcessBuilder.Redirect`.
#
# Possible values:
# * `inherit` - use the I/O of the parent process; applicable to all three streams
# * `read:/path/to/input/file` - use the specified file for input; applicable to stdin
# * `write:/path/to/output/file` - use the specified file for output; applicable to stdout and stderr
# * `append:/path/to/output/file` - use the specified file for output; applicable to stdout and stderr
# * `err2out` - redirect `stderr` to `stdout`; applicable to stderr
#
# Optional, default is inherit all.
builderIo:
  stdin: inherit
  stdout: inherit
  stderr: inherit

# `skip` - skip the srcdeps processing altogether
#
# Optional, default: false
skip: false

# `sourcesDirectory` - A directory where the dependency sources should be checked out. Each SCM repository
# will have a subdirectory named after its `id` there.
#
# Optional, default: `${maven.repo.local}/../srcdeps/` - i.e. usually `~/.m2/srcdeps`
sourcesDirectory: ~/.m2/srcdeps

# `verbosity` - the verbosity level the appropriate dependency build tool (such as Maven) should use
# during the build of a dependency. The interpretation of the individual levels is up to the given build
# tool. Some build tools may map the levels listed here to a distinct set of levels they support
# internally.
#
# Possible values: error, warn, info, debug, trace
#
# Optional, default: warn
verbosity: warn


# `repositories` - a map of source repositories to checkout and build from
#
# Required, no default
repositories:

  # the `id` of the source repository, typically the `groupId` of its artifacts,
  # or any other string unique at this level of the yaml file.
  org.l2x6.maven.srcdeps.itest:

    # `selectors` - a way how to map dependency artifacts to source repositories.
    #
    # A selector is a pattern to match dependency GAVs (triples of groupId, artifactId and version) against. A selector
    # has three colon delimited subpatterns, one for each of groupId, artifactId and version. The subpatterns for
    # artifactId and version can be omitted. The subpatterns may contain the wildcard * that stands for a number
    # of characters or an empty string.
    #
    # = Selector examples:
    #
    # `org.my-group`             an equivalent of `org.my-group:*:*`. It will match any version of any artifact
    #                            having groupId `org.my-group`.
    #
    # `org.my-group*`            an equivalent of `org.my-group*:*:*`. It will match any version of any artifact
    #                            whose groupId starts with `org.my-group` - i.e. it will match all of `org.my-group`,
    #                            `org.my-group.api`, `org.my-group.impl`, etc.
    #
    # `org.my-group:my-artifact` an equivalent of `org.my-group:my-artifact:*`. It will match any version of all such
    #                            artifacts that have groupId `org.my-group` and artifactId `my-artifact`
    #
    # `org.my-group:my-artifact:1.2.3` will match just the version 1.2.3 of artifacts `org.my-group:my-artifact`.
    #
    # Note that in configModelVersion: 1.0, a selectors contained only groupId literals to perform exact string match
    # with the `groupId` of the dependency. Because the subpatterns for artifactId and version can be omitted in 1.1
    # the 1.1 selectors are backward compatible with 1.0 selectors.
    #
    # At least one selector is required
    selectors:
    - org.l2x6.maven.srcdeps.itest # This SCM repository entry will be used for building artifacts
                                   # with groupId org.l2x6.maven.srcdeps.itest

    # `urls` - a list of URLs to checkout the sources of the given dependency. If you list multiple SCM
    # repositories here then only the first successful checkout will count.
    #
    # At least one URL is required
    urls:
    - git:https://github.com/srcdeps/srcdeps-test-artifact.git

    # Appended to the list of build tool specific default build arguments. To override the given
    # build tool's defaults, see addDefaultBuildArguments
    #
    # Optional, defaults for maven: `clean install`
    buildArguments:
    - -Dcheckstyle.skip=true
    - -Dlicense.skip=true # for skipping the tests, see `skipTests` below, that is BTW `true` by default

    # `addDefaultBuildArguments` - if true, the build tool's default arguments will be used when building
    # a dependency. Otherwise, no default build arguments will be used. The default build arguments are
    # build tool specific.
    #
    # For Maven, the default build arguments are `clean install`.
    #
    # Optional, default: true
    addDefaultBuildArguments: true

    # `skipTests` - if set to `true` no tests will be run when building a dependency. For dependencies built
    # with Maven, this accounts to adding `-DskipTests` to the `mvn` arguments.
    #
    # Optional, default: true
    skipTests: true

    # `failWithAnyOfArguments` - a handy way to e.g. prevent releasing with source dependencies when any of the listed
    # build arguments is present in the top level build.
    #
    # For Maven, you can list:
    # * Mojo executions, such as `deploy:deploy` or `org.my-group:my-plugin:my-mojo`
    # * Profiles prefixed with `-P`, e.g. `-Pmy-breaker-profile`
    # * Properties prefixed with `-D`, e.g. `-Dmy-breaker-property`
    # * Property=value pairs prefixed with `-D`, e.g. `-Dmy-breaker-property=my-breaker-value`
    #
    # Note that this list is appended to the default list of "fail with arguments" of the given build
    # tool. Maven's default "fail with arguments" are `release:prepare release:perform`.
    #
    # Note that for Maven, you need to add the `srcdeps-maven-enforcer` to `.mvn/extensions.xml` - see the
    # link:https://github.com/srcdeps/srcdeps-maven/blob/master/srcdeps-maven-quickstarts/srcdeps-mvn-git-revision-quickstart/.mvn/extensions.xml#L31-L35[Srcdeps Git Revision Quickstart].
    #
    # Optional, with build tool specific defaults
    failWithAnyOfArguments:
    - deploy:deploy
    - -Pmy-breaker-profile
    - -Dmy-breaker-property

    # `addDefaultFailWithAnyOfArguments` - if `true`, the build tool's default "fail with arguments" will be prepended to
    # failWithAnyOfArguments of the top level build. Otherwise, the default list of "fail with arguments" of the given
    # build tool will be disregared and only the list explicitly present in `failWithAnyOfArguments` will will be
    # effective.
    #
    # Maven's default "fail with arguments" are `release:prepare release:perform`.
    #
    # Optional, default: true
    addDefaultFailWithAnyOfArguments: true
